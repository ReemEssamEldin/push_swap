
/*Declare pointers to two data structures/linked list, one for stack 'a' and another for 'b'			*/
/*	Set both pointrs to NULL to avoid undefined behaviour and indicate we're starting with empty stacks	*/
/*Handle input count errors. Argument count must be 2 or more, and the second input must not be empty	*/
/*	If input error, return error																		*/
/*Handle both cases of input, weather a variable number of command line arguments, or as a strig		*/
/*	If the input of numbrs is as a string, call 'split()' to split the substrings						*/
/*Initialize stack 'a' by appending each input number as a node to stack 'a'							*/
/*Check if stack 'a' is sorted																			*/
/*	If not sorted, implement our sorting algorithm														*/
/*Check for 2 numbers																					*/
/*	If so, simply swap the numbers																		*/
/*Check for 3 numbers																					*/
/*	If so, implement our simple 'sort three' algorithm													*/
/*Check if the stack has more than 3 numbers															*/
/*	If so, implement our Turk Algorithm																	*/
/*Handle integer overflow, duplicates, and syntax errors, e.g. input must only contain digits, or '-''+' signs*/
/*	If errors found, free stack 'a' and return error													*/
/*Check for each input, if it is a long integer															*/
/*	Append the nodes to stack 'a'																		*/
/*Functions we will need																				*/
/*Function to handle errors and frees stacks when needed												*/
/*Functions to do the swap, rotate, revese rotate, push operations										*/
/*Function that finds the length of a stack																*/
/*Function that finds the last node																		*/
/*Functions that finds the smallest number and the biggest number(min and max nodes)					*/

